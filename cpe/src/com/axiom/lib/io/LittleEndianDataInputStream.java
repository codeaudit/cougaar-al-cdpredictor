package com.axiom.lib.io ;
import java.io.*;

/** InputStream for files saved in little-Endian Format binary files
 *  such as those generated by Intelx86 systems.
 */
public class LittleEndianDataInputStream extends FilterInputStream {
    public LittleEndianDataInputStream( InputStream in ) {
      super(in);
    }
    
    /** Read a single byte, returning in as an integer.
     */
    public final int read() throws IOException{
      return in.read();
    }
    
    public final byte readByte() throws IOException{
	  int ch = in.read();
	  if (ch < 0)
	      throw new EOFException();
	  return (byte)(ch);
    }
    
    /** Read a single byte character from the stream.
     */
    public final char readByteChar() throws IOException{
      return (char) readByte();   
    }

    public final int readInt() throws IOException {
      for (int i=0;i<ia.length;i++)
        ia[i] = read();
      return ( ( ia[0] << 0 ) + ( ia[1] << 8 ) + ( ia[2] << 16 ) + ( ia[3] << 24 ) ) ;
    }
    
    public final short readShort() throws IOException {
      for (int i=0;i<sa.length;i++)
        sa[i] = read();
      return (short) (( sa[1] << 8 ) + ( sa[0] << 0 )) ;
    }
    
    public final int readUnsignedShort() throws IOException {
      for (int i=0;i<sa.length;i++)
        sa[i] = read();
      return (( sa[1] << 8 ) + ( sa[0] << 0 )) ;         
    }
    
    public final float readFloat() throws IOException {
      return Float.intBitsToFloat( readInt() );
    }
    
    public final String readPrefixString() throws IOException {
      int csize = readInt();
      if ( csize == 0 )
         return new String();
      if ( csize > 1024 )
         throw new IOException("Maximum string size exceeded. Found string size of" + csize );
      char [] result = new char[csize];
      for (int i=0;i<csize;i++)  // Read string into array ;
         result[i]= readByteChar();
         
      return new String( result ) ;
    }

    static int[] ia = new int[4] ;
    static int[] sa = new int[2];
    InputStream is ;
}